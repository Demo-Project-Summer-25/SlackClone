package com.hire_me.Ping.dms.mapper;

import com.hire_me.Ping.dms.dto.DmCreateRequest;
import com.hire_me.Ping.dms.dto.DmParticipantRequest;
import com.hire_me.Ping.dms.dto.DmResponse;
import com.hire_me.Ping.dms.entity.DirectConversation;
import com.hire_me.Ping.dms.entity.DirectParticipant;
import org.springframework.stereotype.Component;

import java.time.Instant;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;
import java.util.stream.Collectors;

@Component
public class DmMapper {

    // ----------------- Request DTO -> Entity (DirectConversation) -----------------
    public DirectConversation toConversation(DmCreateRequest req) {
        if (req == null) return null;

        DirectConversation conv = new DirectConversation();
        // ID will be auto-generated by @GeneratedValue(strategy = GenerationType.UUID)

        // Copy over who created it
        conv.setCreatedByUserId(req.getCreatedByUserId());

        // Whether it's a group or 1:1 chat
        conv.setGroup(req.isGroup());

        // Optional title for the conversation
        conv.setTitle(req.getTitle());

        // Mark the creation time as "now" - using Instant instead of LocalDateTime
        conv.setCreatedAt(Instant.now());

        return conv;
    }

    // ----------------- Request DTO -> Entity (DirectParticipant) -----------------
    public DirectParticipant toParticipant(UUID conversationId, DmParticipantRequest req) {
        if (req == null || conversationId == null) return null;

        DirectParticipant participant = new DirectParticipant();
        // ID will be auto-generated by @GeneratedValue(strategy = GenerationType.UUID)

        // Link this participant to the conversation
        participant.setDirectConversationId(conversationId);

        // Which user is joining
        participant.setUserId(req.getUserId());

        // Mark the join time as "now" - using Instant instead of LocalDateTime
        participant.setJoinedAt(Instant.now());
        participant.setLeftAt(null); // Still active

        // Null-safe boolean
        participant.setAdmin(req.getAdmin() != null ? req.getAdmin() : false);

        // If notifyLevel is not provided, default to ALL
        participant.setNotifyLevel(
            req.getNotifyLevel() != null ? req.getNotifyLevel() : DirectParticipant.NotifyLevel.ALL
        );

        return participant;
    }

    // ----------------- Entity -> Response DTO -----------------
    public DmResponse toResponse(DirectConversation conv, List<DirectParticipant> participants) {
        if (conv == null) return null;

        DmResponse response = new DmResponse();

        // Copy top-level conversation fields
        response.setId(conv.getId());
        response.setCreatedByUserId(conv.getCreatedByUserId());
        response.setTitle(conv.getTitle());
        response.setGroup(conv.isGroup());
        response.setCreatedAt(conv.getCreatedAt());

        if (participants != null) {
            response.setParticipants(participants.stream()
                .map(this::toParticipantResponse)
                .collect(Collectors.toList()));
        }

        return response;
    }

    // ----------------- Entities -> Response DTOs (list) -----------------
    public List<DmResponse> toResponses(List<DirectConversation> conversations, 
                                       Function<UUID, List<DirectParticipant>> participantLoader) {
        if (conversations == null) return null;

        return conversations.stream()
            .map(conv -> toResponse(conv, participantLoader.apply(conv.getId())))
            .collect(Collectors.toList());
    }

    private DmResponse.ParticipantInfo toParticipantResponse(DirectParticipant participant) {
        if (participant == null) return null;

        DmResponse.ParticipantInfo info = new DmResponse.ParticipantInfo();
        info.setUserId(participant.getUserId());
        info.setJoinedAt(participant.getJoinedAt());
        info.setLeftAt(participant.getLeftAt());
        info.setAdmin(participant.isAdmin());
        info.setNotifyLevel(participant.getNotifyLevel());

        return info;
    }
}